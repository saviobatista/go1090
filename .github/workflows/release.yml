name: Auto Release

on:
  push:
    branches: [ "**" ]  # Build and test on any branch
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      create_release:
        description: 'Create actual release (only works on main branch)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: read

env:
  GO_VERSION: '1.21'

jobs:
  version:
    name: Determine Next Version
    runs-on: ubuntu-latest
    # Only run version/tagging on main branch or when explicitly requested
    if: github.ref == 'refs/heads/main' || github.event.inputs.create_release == 'true'
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get latest tag
      id: latest_tag
      run: |
        # Get the latest tag, default to v0.0.0 if no tags exist
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
        echo "Latest tag: $latest_tag"

    - name: Determine version bump
      id: bump_type
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "bump_type=${{ github.event.inputs.version_bump }}" >> $GITHUB_OUTPUT
        else
          # Auto-determine based on commit messages
          commits=$(git log ${{ steps.latest_tag.outputs.latest_tag }}..HEAD --oneline)
          echo "Commits since last tag:"
          echo "$commits"
          
          if echo "$commits" | grep -q "BREAKING CHANGE\|!:"; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
          elif echo "$commits" | grep -q "feat:"; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Calculate next version
      id: version
      run: |
        latest_tag="${{ steps.latest_tag.outputs.latest_tag }}"
        bump_type="${{ steps.bump_type.outputs.bump_type }}"
        
        # Remove 'v' prefix if present
        version=${latest_tag#v}
        
        # Split version into parts
        IFS='.' read -r major minor patch <<< "$version"
        
        # Increment based on bump type
        case $bump_type in
          major)
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          minor)
            minor=$((minor + 1))
            patch=0
            ;;
          patch)
            patch=$((patch + 1))
            ;;
        esac
        
        new_version="$major.$minor.$patch"
        new_tag="v$new_version"
        
        echo "version=$new_version" >> $GITHUB_OUTPUT
        echo "tag=$new_tag" >> $GITHUB_OUTPUT
        echo "Next version: $new_version"
        echo "Next tag: $new_tag"

    - name: Create and push tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        tag="${{ steps.version.outputs.tag }}"
        git tag -a "$tag" -m "Release $tag"
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git "$tag"
        echo "Created and pushed tag: $tag"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    needs: [version]
    # Always run build for testing, but version job may be skipped
    if: always()
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # Linux builds (dynamic linking for reliability)
          - os: linux
            arch: amd64
            runner: ubuntu-latest
            cgo_enabled: 1
            static: false
          - os: linux
            arch: arm64
            runner: ubuntu-latest
            cgo_enabled: 1
            static: false
          # macOS builds
          - os: darwin
            arch: amd64
            runner: macos-13  # Intel runner for x86_64 builds
            cgo_enabled: 1
            static: false
          - os: darwin
            arch: arm64
            runner: macos-latest  # ARM64 runner for arm64 builds
            cgo_enabled: 1
            static: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'linux'
      shell: bash
      run: |
        sudo apt-get update
        
        # Install common dependencies
        sudo apt-get install -y pkg-config build-essential
        
        # Install dependencies and cross-compilation tools
        sudo apt-get install -y librtlsdr-dev libusb-1.0-0-dev
        
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          # Install cross-compilation tools
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          
          # Add ARM64 architecture
          sudo dpkg --add-architecture arm64
          
          # Create ARM64-specific repositories using Ubuntu Ports
          echo "# Ubuntu Ports for ARM64 packages" | sudo tee /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble main restricted" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-updates main restricted" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble universe" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-updates universe" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-updates multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-security main restricted" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-security universe" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-security multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          
          # Clean up any existing ARM64 package lists to avoid conflicts
          sudo rm -f /var/lib/apt/lists/*arm64*
          
          # Update package lists with error handling
          sudo apt-get update || {
            echo "apt-get update failed, but continuing with available packages..."
            # Continue even if some repositories fail
          }
          
          # Install ARM64 libraries
          sudo apt-get install -y librtlsdr-dev:arm64 libusb-1.0-0-dev:arm64 || {
            echo "Failed to install ARM64 libraries, but continuing..."
          }
        fi
        
    - name: Install dependencies (macOS)
      if: matrix.os == 'darwin'
      shell: bash
      run: |
        brew install librtlsdr pkg-config
        
        # Set up environment for cross-compilation
        echo "PKG_CONFIG_PATH=$(brew --prefix librtlsdr)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

    - name: Set up build environment
      shell: bash
      run: |
        echo "GOOS=${{ matrix.os }}" >> $GITHUB_ENV
        echo "GOARCH=${{ matrix.arch }}" >> $GITHUB_ENV
        echo "CGO_ENABLED=${{ matrix.cgo_enabled }}" >> $GITHUB_ENV

    - name: Set up cross-compilation (Linux ARM64)
      if: matrix.os == 'linux' && matrix.arch == 'arm64'
      shell: bash
      run: |
        echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
        
        # Configure cross-compilation environment for ARM64 libraries
        echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/lib/pkgconfig" >> $GITHUB_ENV
        echo "PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
        echo "LIBRARY_PATH=/usr/lib/aarch64-linux-gnu:/usr/lib" >> $GITHUB_ENV
        
        # Create symlinks for ARM64 libraries if they don't exist
        sudo mkdir -p /usr/lib/aarch64-linux-gnu
        sudo ln -sf /usr/lib/x86_64-linux-gnu/librtlsdr.so /usr/lib/aarch64-linux-gnu/librtlsdr.so 2>/dev/null || true
        sudo ln -sf /usr/lib/x86_64-linux-gnu/libusb-1.0.so /usr/lib/aarch64-linux-gnu/libusb-1.0.so 2>/dev/null || true

    - name: Validate setup (ARM64)
      if: matrix.os == 'linux' && matrix.arch == 'arm64'
      shell: bash
      run: |
        echo "Cross-compilation validation:"
        echo "CC: $CC"
        echo "CXX: $CXX"
        echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
        echo "PKG_CONFIG_LIBDIR: $PKG_CONFIG_LIBDIR"
        echo "LIBRARY_PATH: $LIBRARY_PATH"
        echo ""
        echo "Package validation:"
        pkg-config --exists librtlsdr && echo "✅ librtlsdr found" || echo "❌ librtlsdr not found"
        dpkg -l | grep librtlsdr || echo "No librtlsdr packages installed"
        echo ""
        echo "Compiler validation:"
        $CC --version
        echo ""
        echo "Library symlinks:"
        ls -la /usr/lib/aarch64-linux-gnu/librtlsdr.so 2>/dev/null || echo "librtlsdr.so symlink not found"
        ls -la /usr/lib/aarch64-linux-gnu/libusb-1.0.so 2>/dev/null || echo "libusb-1.0.so symlink not found"

    - name: Build binary
      shell: bash
      run: |
        mkdir -p dist
        
        # Use version from version job if available, otherwise use test version
        if [ "${{ needs.version.outputs.version }}" != "" ]; then
          version="${{ needs.version.outputs.version }}"
        else
          # Test version for non-main branches
          version="test-$(date +%Y%m%d)-$(echo ${{ github.sha }} | cut -c1-7)"
        fi
        
        echo "Building version: $version"
        echo "Building for GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=$CGO_ENABLED"
        go env
        
        # CGO build - validate pkg-config can find libraries
        echo "Validating CGO build environment..."
        echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
        pkg-config --exists librtlsdr && echo "✅ librtlsdr found" || echo "❌ librtlsdr NOT found"
        
        # Dynamic build (Linux/macOS)
        go build -ldflags "-X main.Version=$version" -o dist/go1090-${{ matrix.os }}-${{ matrix.arch }} .

    - name: Create release package
      shell: bash
      run: |
        cd dist
        binary_name="go1090-${{ matrix.os }}-${{ matrix.arch }}"
        
        # Use version from version job if available, otherwise use test version
        if [ "${{ needs.version.outputs.version }}" != "" ]; then
          package_version="${{ needs.version.outputs.version }}"
        else
          package_version="test-$(date +%Y%m%d)-$(echo ${{ github.sha }} | cut -c1-7)"
        fi
        
        package_name="go1090-${package_version}-${{ matrix.os }}-${{ matrix.arch }}"
        
        mkdir -p "$package_name"
        cp "$binary_name" "$package_name/"
        cp ../README.md "$package_name/"
        cp ../LICENSE "$package_name/"
        cp ../CHANGELOG.md "$package_name/"
        
        # Create platform-specific README
        cat > "$package_name/INSTALL.md" << 'EOF'
        # Installation Instructions - ${{ matrix.os }}/${{ matrix.arch }}
        
        ## Quick Start
        
        ```bash
        # Make executable
        chmod +x go1090-${{ matrix.os }}-${{ matrix.arch }}
        
        # Run with default settings
        ./go1090-${{ matrix.os }}-${{ matrix.arch }}
        ```
        
        ## Dependencies
        
        ${{ matrix.os == 'linux' && '### Linux
        **Required**: Install RTL-SDR runtime libraries
        
        ```bash
        # Ubuntu/Debian 
        sudo apt-get install librtlsdr2 libusb-1.0-0
        
        # CentOS/RHEL/Fedora
        sudo yum install rtl-sdr libusb
        # or: sudo dnf install rtl-sdr libusb
        ```' || '' }}
        
        ${{ matrix.os == 'darwin' && '### macOS
        **Required**: Install RTL-SDR libraries
        
        ```bash
        brew install librtlsdr
        ```' || '' }}
        
        ## Usage
        
        ```bash
        # Show help
        ./go1090-${{ matrix.os }}-${{ matrix.arch }} --help
        
        # Run with custom settings
        ./go1090-${{ matrix.os }}-${{ matrix.arch }} --verbose --log-dir ./logs
        ```
        
        For more information, see README.md
        EOF
        
        # Create ZIP archive
        zip -r "${package_name}.zip" "$package_name"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: go1090-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/go1090-*-${{ matrix.os }}-${{ matrix.arch }}.zip

  release:
    name: Create Release
    needs: [version, build]
    runs-on: ubuntu-latest
    # Only create releases on main branch or when explicitly requested
    if: (github.ref == 'refs/heads/main' || github.event.inputs.create_release == 'true') && needs.version.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure
      run: ls -la artifacts/

    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag for changelog
        if [ -n "${{ needs.version.outputs.tag }}" ]; then
          previous_tag=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$previous_tag" ]; then
            echo "## Changes since $previous_tag" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            git log $previous_tag..HEAD --oneline --pretty=format:"- %s" >> RELEASE_NOTES.md
          else
            echo "## Initial Release" > RELEASE_NOTES.md
          fi
        else
          echo "## Release Notes" > RELEASE_NOTES.md
        fi
        
        # Add download section
        cat >> RELEASE_NOTES.md << EOF
        
        ## Downloads
        
        Choose the appropriate ZIP file for your system:
        
        ### Linux
        - **Linux x64**: \`go1090-${{ needs.version.outputs.version }}-linux-amd64.zip\`
        - **Linux ARM64**: \`go1090-${{ needs.version.outputs.version }}-linux-arm64.zip\`
        
        ### macOS
        - **macOS Intel**: \`go1090-${{ needs.version.outputs.version }}-darwin-amd64.zip\`
        - **macOS Apple Silicon**: \`go1090-${{ needs.version.outputs.version }}-darwin-arm64.zip\`
        
        ## Installation
        
        1. Download the appropriate ZIP file for your system
        2. Extract the ZIP file
        3. Follow the INSTALL.md instructions included in the package
        4. Install RTL-SDR dependencies as described
        5. Run the binary
        
        ## Requirements
        
        - RTL2832U USB SDR device
        - librtlsdr library installed (except Windows)
        - 1090MHz antenna (for optimal reception)
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.version.outputs.tag }}
        name: Go1090 ${{ needs.version.outputs.tag }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        files: |
          artifacts/*/go1090-*-*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-summary:
    name: Test Summary
    needs: [version, build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Test Build Summary
      run: |
        echo "## 🧪 Pipeline Test Summary"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo ""
        
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "✅ Running on main branch - releases will be created"
        else
          echo "🔄 Running on feature branch - testing only (no releases)"
        fi
        
        echo ""
        echo "### Build Status:"
        if [ "${{ needs.build.result }}" = "success" ]; then
          echo "✅ All builds completed successfully"
        else
          echo "❌ Some builds failed"
        fi
        
        echo ""
        echo "### Version Status:"
        if [ "${{ needs.version.result }}" = "success" ]; then
          echo "✅ Version determined: ${{ needs.version.outputs.version }}"
        elif [ "${{ needs.version.result }}" = "skipped" ]; then
          echo "⏭️  Version job skipped (not on main branch)"
        else
          echo "❌ Version job failed"
        fi
        
        echo ""
        echo "To create an actual release:"
        echo "1. Push to main branch, OR"
        echo "2. Manually trigger with 'create_release' = true"

  notification:
    name: Release Notification
    needs: [version, release]
    runs-on: ubuntu-latest
    if: always() && needs.release.result != 'skipped'
    
    steps:
    - name: Notify Success
      if: needs.release.result == 'success'
      run: |
        echo "🎉 Release ${{ needs.version.outputs.tag }} created successfully!"
        echo "Download: https://github.com/${{ github.repository }}/releases/tag/${{ needs.version.outputs.tag }}"
        
    - name: Notify Failure
      if: needs.release.result == 'failure'
      run: |
        echo "❌ Release ${{ needs.version.outputs.tag }} failed!"
        exit 1 