name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: linux
            arch: amd64
            runner: ubuntu-latest
            cgo_enabled: 1
            static: true
          - os: linux
            arch: arm64
            runner: ubuntu-latest
            cgo_enabled: 1
            static: true
          # macOS builds
          - os: darwin
            arch: amd64
            runner: macos-latest
            cgo_enabled: 1
            static: false
          - os: darwin
            arch: arm64
            runner: macos-latest
            cgo_enabled: 1
            static: false
          # Windows builds (CGO disabled due to complexity)
          - os: windows
            arch: amd64
            runner: windows-latest
            cgo_enabled: 0
            static: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y librtlsdr-dev pkg-config
        # For static builds
        sudo apt-get install -y gcc-aarch64-linux-gnu
        
    - name: Install dependencies (macOS)
      if: matrix.os == 'darwin'
      run: |
        brew install librtlsdr pkg-config

    - name: Set up build environment
      run: |
        echo "GOOS=${{ matrix.os }}" >> $GITHUB_ENV
        echo "GOARCH=${{ matrix.arch }}" >> $GITHUB_ENV
        echo "CGO_ENABLED=${{ matrix.cgo_enabled }}" >> $GITHUB_ENV

    - name: Set up cross-compilation (Linux ARM64)
      if: matrix.os == 'linux' && matrix.arch == 'arm64'
      run: |
        echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV

    - name: Build binary
      run: |
        mkdir -p dist
        if [ "${{ matrix.cgo_enabled }}" = "1" ]; then
          if [ "${{ matrix.static }}" = "true" ]; then
            # Static build for Linux
            go build -ldflags "-linkmode external -extldflags '-static' -X main.Version=${{ github.ref_name }}" -o dist/go1090-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} .
          else
            # Dynamic build for macOS
            go build -ldflags "-X main.Version=${{ github.ref_name }}" -o dist/go1090-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} .
          fi
        else
          # No CGO build for Windows (RTL-SDR functionality disabled)
          go build -ldflags "-X main.Version=${{ github.ref_name }}" -o dist/go1090-${{ matrix.os }}-${{ matrix.arch }}.exe .
        fi

    - name: Create release package
      run: |
        cd dist
        binary_name="go1090-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }}"
        package_name="go1090-${{ github.ref_name }}-${{ matrix.os }}-${{ matrix.arch }}"
        
        mkdir -p "$package_name"
        cp "$binary_name" "$package_name/"
        cp ../README.md "$package_name/"
        cp ../LICENSE "$package_name/"
        
        # Create platform-specific README
        cat > "$package_name/INSTALL.md" << EOF
        # Installation Instructions - ${{ matrix.os }}/${{ matrix.arch }}
        
        ## Dependencies
        
        ${{ matrix.os == 'linux' && '### Linux (Ubuntu/Debian)
        ```bash
        sudo apt-get update
        sudo apt-get install librtlsdr0
        ```
        
        ### Linux (CentOS/RHEL/Fedora)
        ```bash
        sudo yum install rtl-sdr  # or dnf install rtl-sdr
        ```' || '' }}
        
        ${{ matrix.os == 'darwin' && '### macOS
        ```bash
        brew install librtlsdr
        ```' || '' }}
        
        ${{ matrix.os == 'windows' && '### Windows
        **Note**: This Windows build has RTL-SDR support disabled due to build complexity.
        For full RTL-SDR support on Windows, please build from source or use WSL with the Linux build.
        
        For RTL-SDR support:
        1. Install librtlsdr via MSYS2/MinGW
        2. Build from source with CGO enabled' || '' }}
        
        ## Usage
        
        ```bash
        # Make executable (Linux/macOS only)
        chmod +x go1090-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }}
        
        # Run with default settings
        ./go1090-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }}
        
        # Run with custom settings
        ./go1090-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} --verbose --log-dir ./logs
        ```
        
        ## Troubleshooting
        
        See the main README.md for detailed troubleshooting information.
        EOF
        
        # Create archive
        if [ "${{ matrix.os }}" = "windows" ]; then
          zip -r "${package_name}.zip" "$package_name"
        else
          tar -czf "${package_name}.tar.gz" "$package_name"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: go1090-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/go1090-${{ github.ref_name }}-${{ matrix.os }}-${{ matrix.arch }}.*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Display structure
      run: ls -la artifacts/

    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          # Go1090 ADS-B Beast Mode Decoder ${{ github.ref_name }}
          
          ## Downloads
          
          Choose the appropriate binary for your system:
          
          ### Linux
          - **Linux x64**: `go1090-${{ github.ref_name }}-linux-amd64.tar.gz`
          - **Linux ARM64**: `go1090-${{ github.ref_name }}-linux-arm64.tar.gz`
          
          ### macOS
          - **macOS Intel**: `go1090-${{ github.ref_name }}-darwin-amd64.tar.gz`
          - **macOS Apple Silicon**: `go1090-${{ github.ref_name }}-darwin-arm64.tar.gz`
          
          ### Windows
          - **Windows x64**: `go1090-${{ github.ref_name }}-windows-amd64.zip`
          - ⚠️ **Note**: Windows build has limited RTL-SDR support. Use Linux/macOS for full functionality.
          
          ## Installation
          
          1. Download the appropriate archive for your system
          2. Extract the archive
          3. Follow the INSTALL.md instructions included in the package
          4. Install RTL-SDR dependencies as described
          5. Run the binary
          
          ## What's New
          
          See the CHANGELOG.md for detailed changes in this release.
          
          ## Requirements
          
          - RTL2832U USB SDR device
          - librtlsdr library installed
          - 1090MHz antenna (for optimal reception)
          
          ## Support
          
          - 📖 **Documentation**: See README.md
          - 🐛 **Issues**: Report on GitHub Issues
          - 💬 **Discussions**: Use GitHub Discussions
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        for file in artifacts/*/go1090-${{ github.ref_name }}-*; do
          if [ -f "$file" ]; then
            echo "Uploading $file"
            gh release upload ${{ github.ref_name }} "$file"
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y librtlsdr-dev

    - name: Run tests
      run: go test -v ./...

    - name: Build test
      run: go build -v .

    - name: Check binary
      run: |
        ./go1090 --help
        ./go1090 --version || echo "Version flag not implemented yet" 