name: Simple Auto Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'

env:
  GO_VERSION: '1.21'

jobs:
  release:
    name: Auto Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y librtlsdr-dev pkg-config

    - name: Run tests
      run: go test -v ./...

    - name: Determine next version
      id: version
      run: |
        # Get the latest tag
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $latest_tag"
        
        # Extract version number (remove 'v' prefix)
        version=${latest_tag#v}
        
        # Split into components
        IFS='.' read -r major minor patch <<< "$version"
        
        # Simple increment patch version
        patch=$((patch + 1))
        
        new_version="$major.$minor.$patch"
        new_tag="v$new_version"
        
        echo "version=$new_version" >> $GITHUB_OUTPUT
        echo "tag=$new_tag" >> $GITHUB_OUTPUT
        echo "Next version: $new_version"

    - name: Create tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.tag }}"
        git push origin "${{ steps.version.outputs.tag }}"

    - name: Build releases
      run: |
        mkdir -p dist
        version="${{ steps.version.outputs.version }}"
        
        # Build for multiple platforms
        platforms=(
          "linux/amd64"
          "linux/arm64"
          "darwin/amd64"
          "darwin/arm64"
          "windows/amd64"
        )
        
        for platform in "${platforms[@]}"; do
          IFS='/' read -r os arch <<< "$platform"
          echo "Building for $os/$arch..."
          
          output_name="go1090-$os-$arch"
          if [ "$os" = "windows" ]; then
            output_name="$output_name.exe"
            export CGO_ENABLED=0
          else
            export CGO_ENABLED=1
          fi
          
          export GOOS=$os
          export GOARCH=$arch
          
          go build -ldflags "-X main.Version=$version" -o "dist/$output_name" .
          
          # Create zip package
          zip_name="go1090-$version-$os-$arch.zip"
          (cd dist && zip "../$zip_name" "$output_name" ../README.md ../LICENSE)
          
          echo "Created: $zip_name"
        done

    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: Release ${{ steps.version.outputs.tag }}
        body: |
          ## Go1090 ${{ steps.version.outputs.tag }}
          
          Automated release created from main branch.
          
          ### Downloads
          - Linux x64: `go1090-${{ steps.version.outputs.version }}-linux-amd64.zip`
          - Linux ARM64: `go1090-${{ steps.version.outputs.version }}-linux-arm64.zip`
          - macOS Intel: `go1090-${{ steps.version.outputs.version }}-darwin-amd64.zip`
          - macOS Apple Silicon: `go1090-${{ steps.version.outputs.version }}-darwin-arm64.zip`
          - Windows: `go1090-${{ steps.version.outputs.version }}-windows-amd64.zip`
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        for zip_file in go1090-${{ steps.version.outputs.version }}-*.zip; do
          if [ -f "$zip_file" ]; then
            echo "Uploading $zip_file"
            gh release upload ${{ steps.version.outputs.tag }} "$zip_file"
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 